// -*- mode: protobuf -*-
//
// A schema for Beancount's fully booked stream of directives. These are the
// definitions of the API and main artifact produced by the Beancount core, a
// stream of directives.
//
// Note: Unlike in Beancount 2.x, the messages representing the intermediate
// parsed state (the AST) are defined and located elsewhere.

syntax = "proto2";

package beancount;

import 'beancount/ccore/number.proto';
import 'beancount/ccore/date.proto';
import 'beancount/cparser/inter.proto';
import 'beancount/cparser/options.proto';

// A metadata value. This is a simple general variant type intended to keep the
// values of the metadata key-value pairs.
message MetaValue {
  oneof value {
    string text = 1;
    string account = 2;
    string currency = 3;
    string tag = 4;
    string link = 5;
    string flag = 6;
    Date date = 7;
    bool boolean = 8;
    int64 integer = 9;
    Number number = 10;
    Amount amount = 11;
  }
}

// A metadata dictionary, or key-value pairs.
message Meta {
  message KV {
    optional string key = 1;
    optional MetaValue value = 2;
  }
  repeated KV kv = 1;
}

// An 'Amount' represents a number of a particular unit of something. It's
// essentially a typed number, with corresponding manipulation operations
// defined on it.
message Amount {
  optional Number number = 1;
  optional string currency = 2;

  // Intermediate parsed expressions before resolution.
  //
  // WARNING: The following fields is only used in the production of the
  // intermediate representation produced by the parser and are never set in the
  // final processed output from Beancount. This is never set in the finalized
  // interpolated and booked data.
  optional inter.Expr expr = 3;
}

// A variant of Amount that also includes a date and a label.
message Cost {
 // A decimal number, the per-unit cost.
  optional Number number = 1;

  // A string, the cost currency.
  optional string currency = 2;

  // A datetime.date for the date that the lot was created at. There should
  // always be a valid date.
  optional Date date = 3;

  // A string for the label of this lot, or None, if there is no label.
  optional string label = 4;
}

// A Position is a pair of units and optional cost. This is used to represent
// lots accumulated over time in inventories, and the impact of posting on an
// inventory is also a position. It is synonymous with a "lot."
message Position {
  // An Amount, the number of units and its currency.
  optional Amount units = 1;

  // An optional Cost that stores the cost basis and lot identification.
  optional Cost cost = 2;
}

// Postings are contained in Transaction entries. These represent the individual
// legs of a transaction. Note: a posting may only appear within a single entry
// (multiple transactions may not share a Posting instance), and that's what the
// entry field should be set to.
message Posting {
  // Location of the posting.
  optional Location location = 1;

  // A dict of strings to values, the metadata that was attached specifically to
  // that posting, or None, if not provided. In practice, most of the instances
  // will be unlikely to have metadata.
  optional Meta meta = 2;

  // Optional posting date.
  optional Date date = 3;

  // An optional flag, a one-character string or None, which is to be associated
  // with the posting. Most postings don't have a flag, but it can be convenient
  // to mark a particular posting as problematic or pending to be reconciled for
  // a future import of its account.
  optional bytes flag = 4;

  // A string, the account that is modified by this posting.
  optional string account = 5;

  // The position this posting impacts on its inventory.
  optional Position position = 6;

  // An Amount, the price at which the position took place, or None, where not
  // relevant. Providing a price member to a posting automatically adds a price
  // in the prices database at the date of the transaction.
  optional Amount price = 7;

  // Intermediate parsed expressions before resolution.
  //
  // WARNING: The following fields is only used in the production of the
  // intermediate representation produced by the parser and are never set in the
  // final processed output from Beancount. This is never set in the finalized
  // interpolated and booked data.
  optional inter.Spec spec = 8;
}

// A pair of a Posting and its parent Transaction. This is inserted as
// temporaries in lists of postings-of-entries, which is the product of a
// realization.
message TxnPosting {
  optional Transaction txn = 1;
  optional Posting posting = 2;
}

//-------------------------------------------------------------------------------
// Directives

// A transaction! This is the main type of object that we manipulate, and the
// entire reason this whole project exists in the first place, because
// representing these types of structures with a spreadsheet is difficult.
message Transaction {
  // A single-character string or None. This user-specified string represents
  // some custom/user-defined state of the transaction. You can use this for
  // various purposes. Otherwise common, pre-defined flags are defined under
  // beancount.core.flags, to flags transactions that are automatically
  // generated.
  optional bytes flag = 1;

  // A free-form string that identifies the payee, or None, if absent.
  optional string payee = 2;

  // A free-form string that provides a description for the transaction. All
  // transactions have at least a narration string, this is never None.
  optional string narration = 3;

  // A list of Posting instances, the legs of this transaction. See the
  // doc under Posting above.
  repeated Posting postings = 4;
}

// An "open account" directive.
message Open {
  // A string, the name of the account that is being opened.
  optional string account = 1;

  // A list of strings, currencies that are allowed in this account. May be
  // None, in which case it means that there are no restrictions on which
  // currencies may be stored in this account.
  repeated string currencies = 2;

  // A Booking enum, the booking method to use to disambiguate postings to this
  // account (when zero or more than one postings match the specification), or
  // None if not specified. In practice, this attribute will be should be left
  // unspecified (None) in the vast majority of cases. See Booking below for a
  // selection of valid methods.
  optional options.Booking booking = 3;
}

// A "close account" directive.
message Close {
  // A string, the name of the account that is being closed.
  optional string account = 1;
}

// An optional commodity declaration directive. Commodities generally do not
// need to be declared, but they may, and this is mainly created as intended to
// be used to attach meta-data on a commodity name. Whenever a plugin needs
// per-commodity meta-data, you would define such a commodity directive. Another
// use is to define a commodity that isn't otherwise (yet) used anywhere in an
// input file. (At the moment the date is meaningless but is specified for
// coherence with all the other directives; if you can think of a good use case,
// let us know).
message Commodity {
  // A string, the commodity under consideration.
  optional string currency = 1;
}

// A "pad this account with this other account" directive. This directive
// automatically inserts transactions that will make the next chronological
// balance directive succeeds. It can be used to fill in missing date ranges of
// transactions, as a convenience. You don't have to use this, it's sugar coating
// in case you need it, while you're entering past history into your Ledger.
message Pad {
  // A string, the name of the account which needs to be filled.
  optional string account = 1;

  // A string, the name of the account which is used to debit from in order to
  // fill 'account'.
  optional string source_account = 2;
}

// A "check the balance of this account" directive. This directive asserts that
// the declared account should have a known number of units of a particular
// currency at the beginning of its date. This is essentially an assertion, and
// corresponds to the final "Statement Balance" line of a real-world statement.
// These assertions act as checkpoints to help ensure that you have entered your
// transactions correctly.
message Balance {
  // A string, the account whose balance to check at the given date.
  optional string account = 1;

  // An Amount, the number of units of the given currency you're expecting
  // 'account' to have at this date.
  optional Amount amount = 2;

  // A Decimal object, the amount of tolerance to use in the verification.
  optional Number tolerance = 3;

  // None if the balance check succeeds. This value is set to the difference if
  // the balance fails.
  optional Number difference = 4;
}

// A note directive, a general note that is attached to an account. These are
// used to attach text at a particular date in a specific account. The notes can
// be anything; a typical use would be to jot down an answer from a phone call
// to the institution represented by the account. It should show up in an
// account's journal. If you don't want this rendered, use the comment syntax in
// the input file, which does not get parsed and stored.
message Note {
  // A string, the account which the note is to be attached to. This is never
  // None, notes always have an account they correspond to.
  optional string account = 1;

  // A free-form string, the text of the note. This can be long if you want it
  // to.
  optional string comment = 2;
}

// An "event value change" directive. These directives are used as string
// variables that have different values over time. You can use these to track an
// address, your location, your current employer, anything you like. The kind of
// reporting that is made of these generic events is based on days and a
// timeline. For instance, if you need to track the number of days you spend in
// each country or state, create a "location" event and whenever you travel, add
// an event directive to indicate its new value. You should be able to write
// simple scripts against those in order to compute if you were present
// somewhere for a particular number of days. Here's an illustrative example
// usage, in order to maintain your health insurance coverage in Canada, you
// need to be present in the country for 183 days or more, excluding trips of
// less than 30 days. There is a similar test to be done in the US by aliens to
// figure out if they need to be considered as residents for tax purposes (the
// so-called "substantial presence test"). By integrating these directives into
// your bookkeeping, you can easily have a little program that computes the
// tests for you. This is, of course, entirely optional and somewhat auxiliary
// to the main purpose of double-entry bookkeeping, but correlates strongly with
// the transactions you insert in it, and so it's a really convenient thing to
// have in the same input file.
message Event {
  // A short string, typically a single lowercase word, that defines a unique
  // variable whose value changes over time. For example, 'location'.
  optional string type = 1;

  // A free-form string, the value of the variable as of the date of the
  // transaction.
  optional string description = 2;
}

// A named query declaration. This directive is used to create pre-canned
// queries that can then be automatically run or made available to the shell, or
// perhaps be rendered as part of a web interface. The purpose of this routine
// is to define useful queries for the context of the particular given Beancount
// input file.
//
// The date is the date at which this query should be run. All directives
// following this date will be ignored automatically. This is essentially
// equivalent to the CLOSE modifier in the shell syntax.
message Query {
  // A string, the unique identifier for the query.
  optional string name = 1;

  // The SQL query string to be run or made available.
  optional string query_string = 2;
}

// A price declaration directive. This establishes the price of a currency in
// terms of another currency as of the directive's date. A history of the prices
// for each currency pairs is built and can be queried within the bookkeeping
// system. Note that because Beancount does not store any data at time-of-day
// resolution, it makes no sense to have multiple price directives at the same
// date. (Beancount will not attempt to solve this problem; this is beyond the
// general scope of double-entry bookkeeping and if you need to build a day
// trading system, you should probably use something else).
message Price {
  // A string, the currency that is being priced, e.g. HOOL.
  optional string currency = 1;

  // An instance of Amount, the number of units and currency that 'currency' is
  // worth, for instance 1200.12 USD.
  optional Amount amount = 2;
}

// A document file declaration directive. This directive is used to attach a
// statement to an account, at a particular date. A typical usage would be to
// render PDF files or scans of your bank statements into the account's journal.
// While you can explicitly create those directives in the input syntax, it is
// much more convenient to provide Beancount with a root directory to search for
// filenames in a hierarchy mirroring the chart of accounts, filenames which
// should match the following dated format: "YYYY-MM-DD.*". See options for
// detail. Beancount will automatically create these documents directives based
// on the file hierarchy, and you can get them by parsing the list of entries.
message Document {
  // A string, the account which the statement or document is associated with.
  optional string account = 1;

  // The absolute filename of the document file.
  optional string filename = 2;
}

// A custom directive. This directive can be used to implement new experimental
// dated features in the Beancount file. This is meant as an intermediate
// measure to be used when you would need to implement a new directive in a
// plugin. These directives will be parsed liberally... any list of tokens are
// supported. All that is required is some unique name for them that acts as a
// "type". These directives are included in the stream and a plugin should be
// able to gather them.
message Custom {
  // A string that represents the type of the directive.
  optional string type = 1;

  // A list of values of various simple types supported by the grammar. (Note
  // that this list is not enforced to be consistent for all directives of the
  // same type by the parser.)
  repeated MetaValue values = 2;
}

// A valid directive type. The result of parsing a Beancount file is a sorted
// stream of directives, ordered by date.
//
// Directives may be of multiple types. The most important type of directive in
// the stream is a Transaction and a lot of the processing functions work only
// on those (and filter them out of the stream). All the other directives
// present in the input file are also included in the stream. Processing
// functions and plugins can extract those and implement corresponding
// functionality.
message Directive {
  // Location (filename and lime number) where the directive was parsed from.
  optional Location location = 1;

  // Date associated with the directive. This is not optional; all directives
  // have a valid date. Beancount does not consider time, only dates. The line
  // where the directive shows up in the file is used as a secondary sort key
  // beyond the date.
  optional Date date = 2;

  // A dict of strings to objects, potentially attached to each of the directive
  // types. The values may be strings, account names, tags, dates, numbers,
  // amounts and currencies. There are two special attributes which are always
  // present on all directives: 'filename' and 'lineno'.
  optional Meta meta = 3;

  // An optional set of unique tag strings (without the '#').
  repeated string tags = 4;

  // An optional set of unique link strings (without the '^').
  repeated string links = 5;

  // The type specialization.
  oneof body {
    Transaction transaction = 6;
    Price price = 7;
    Balance balance = 8;
    Open open = 9;
    Close close = 10;
    Commodity commodity = 11;
    Pad pad = 12;
    Document document = 13;
    Note note = 14;
    Event event = 15;
    Query query = 16;
    Custom custom = 17;
  }
}

// A location in an input file. This represents a span of lines.
message Location {
  // An absolute filename path.
  //
  // TODO(blais): Change this to an index to the short list of filenames
  // involved from ProcessingInfo. Make index 0 the special "no file" index for
  // generated directives.
  optional string filename = 1;

  // The beginning line number.
  optional int32 lineno = 2;

  // An optional ending line number.
  optional int32 lineno_end = 3;
}

// An error in processing.
message Error {
  // The error message.
  optional string message = 1;

  // Location where the error occurred in the file, if relevant. The line
  // numbers are optional and may be left unset if not relevant to the context.
  optional Location location = 2;

  // A unique hash referencing of a corresponding directive.
  optional string dirhash = 3;
}

// Container for a list of directives and more infos.
message LedgerProto {
  repeated Directive directives = 1;
  repeated Error errors = 2;
  optional options.Options options = 3;
  optional options.ProcessingInfo info = 4;
}
