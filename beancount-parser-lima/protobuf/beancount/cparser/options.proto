// -*- mode: protobuf -*-
//
// A schema for Beancount's options. This is produced by the parser and provided
// for plugin writers to use.
//
// Note: There is no support for options names aliases here.

syntax = "proto2";

package beancount.options;

import 'beancount/ccore/precision.proto';


// A set of valid booking method names for positions on accounts.
// See http://furius.ca/beancount/doc/inventories for a full explanation.
enum Booking {
  UNKNOWN = 0;
  STRICT = 1;  // Reject ambiguous matches with an error.
  STRICT_WITH_SIZE = 2;  // Reject ambiguous matches with an error but if a
                         // lot matches the size exactly, accept it the oldest.
  NONE = 3;    // Disable matching and accept the creation of mixed inventories.
  AVERAGE = 4; // Average cost booking: merge all matching lots before and after.
  FIFO = 5;    // First-in first-out in the case of ambiguity.
  LIFO = 6;    // Last-in first-out in the case of ambiguity.
}

// Data produced as a by-product of the parsing process. This is essentially
// read-only state that is conceptually separate from the input options,
// produced by the parser.
message ProcessingInfo {
  // The name of the top-level Beancount input file parsed from which the
  // contents of the ledger have been extracted. This may be None, if no file
  // was used.
  optional string filename = 1;

  // A list of other filenames included. This is output from the parser and
  // processed by the loader but the list should otherwise have been cleared by
  // the time it gets to the top-level loader.load_*() function that invoked it.
  // The filenames are absolute. Relative include filenames are resolved against
  // the file that contains the include directives.
  //
  // This is used in the parser, but also, the loader sets this list to the
  // full list of parsed absolute filenames in the options map. This is how you
  // can find out the entire list of files involved in a Beancount load
  // procedure.
  repeated string include = 2;

  // A hash of some of the input data. This is used to supplement the timestamps
  // of the input files for the purpose of load caching. We typically hash the
  // sizes of the files or perhaps even some of the contents, or determine any
  // of the inputs have changed beyond the timestamps of the input files.
  // (Internal use only; do not rely on this.)
  optional string input_hash = 3;

  // Computed processing stats, that can be used to initialize a number
  // formatter.
  optional precision.PrecisionStats precision_stats = 4;

  // A set of all the commodities that we have seen in the file. This is mainly
  // used for efficiency, best computed once at parse time.
  repeated string commodities = 5;

  // A list of Python modules containing transformation functions to run the
  // entries through after parsing. The parser reads the entries as they are,
  // transforms them through a list of standard functions, such as balance
  // checks and inserting padding entries, and then hands the entries over to
  // those plugins to add more auto-generated goodies. The list is a list of
  // pairs/tuples, in the format (plugin-name, plugin-configuration). The
  // plugin-name should be the name of a Python module to import, and within the
  // module we expect a special '__plugins__' attribute that should list the
  // name of transform functions to run the entries through. The
  // plugin-configuration argument is an optional string to be provided by the
  // user. Each function accepts a pair of (entries, options_map) and should
  // return a pair of (new entries, error instances). If a plugin configuration
  // is provided, it is provided as an extra argument to the plugin function.
  // Errors should not be printed out the output, they will be converted to
  // strings by the loader and displayed as dictated by the output medium.
  message Plugin {
    optional string name = 1;
    // Configuration, most typically as a text-formatted protobuf message.
    optional string config = 2;
  }
  repeated Plugin plugin = 6;
}

// Container for account types.
message AccountTypes {
  optional string assets = 1;
  optional string liabilities = 2;
  optional string equity = 3;
  optional string income = 4;
  optional string expenses = 5;
}

// Options that are visible to the user and that can be set.
// Next token: 20
message Options {
  // Root names of every account. This can be used to customize your category
  // names, so that if you prefer "Revenue" over "Income" or "Capital" over
  // "Equity", you can set them here. The account names in your input files
  // must match, and the parser will validate these. You should place these
  // options at the beginning of your file, because they affect how the parser
  // recognizes account names.
  optional AccountTypes account_types = 1;
  reserved 2,3,4,5;

  //  The title of this ledger / input file. This shows up at the top of every
  //  page. e.g. "Joe Smith's Personal Ledger".
  optional string title = 6;

  // Leaf name of the equity account used for summarizing previous transactions
  // into opening balances. e.g. "Opening-Balances".
  optional string account_previous_balances = 7;

  // Leaf name of the equity account used for transferring previous retained
  // earnings from income and expenses accrued before the beginning of the
  // exercise into the balance sheet. e.g., "Earnings:Previous".
  optional string account_previous_earnings = 8;

  // Leaf name of the equity account used for inserting conversions that will
  // zero out remaining amounts due to transfers before the opening date. This
  // will essentially "fixup" the basic accounting equation due to the errors
  // that priced conversions introduce. e.g., "Conversions:Previous".
  optional string account_previous_conversions = 9;

  // Leaf name of the equity account used for transferring current retained
  // earnings from income and expenses accrued during the current exercise into
  // the balance sheet. This is most often called "Net Income". e.g.,
  // "Earnings:Current".
  optional string account_current_earnings = 10;

  // Leaf name of the equity account used for inserting conversions that will
  // zero out remaining amounts due to transfers during the exercise period.
  // e.g., "Conversions:Current".
  optional string account_current_conversions = 11;

  // The name of an account to be used to post unrealized gains to. This is used
  // when making any kind of conversion from cost to price on a balance sheet
  // (or any realization). The amount inserted - the difference between book
  // value and market value - has to be posted to a gains account to keep the
  // balance on the sheet. This has no effect on behavior, other than providing
  // a configurable account name for such postings to occur. Its value should
  // not include the root account (e.g., defaults to "Unrealized").
  optional string account_unrealized_gains = 12;

  // The name of an account to be used to post to and accumulate rounding error.
  // This is unset and this feature is disabled by default; setting this value
  // to an account name will automatically enable the addition of postings on
  // all transactions that have a residual amount. e.g., "Rounding".
  optional string account_rounding = 13;

  // The imaginary currency used to convert all units for conversions at a
  // degenerate rate of zero. This can be any currency name that isn't used in
  // the rest of the ledger. Choose something unique that makes sense in your
  // language. e.g., "NOTHING".
  optional string conversion_currency = 14;

  // Precision for evaluating arithmetic computations and reducing them to
  // decimal numbers.
  optional int32 decimal_evaluation_precision = 24;

  // Explicit precision settings per currency or instrument pair. This is where
  // the values set by the user are stored in the options. This setting was
  // missing in v2 and is very useful: these override the automatically inferred
  // precisions per currency. The expected format for the key is either a single
  // currency ("USD") or a pair of currencies with a separating slash
  // ("USD/HOOL"), and the value a valid decimal number (e.g. "0.01").
  map<string, string> precision = 25;

  // Mappings of currency to the tolerance used when it cannot be inferred
  // automatically. The tolerance at hand is the one used for verifying (1)
  // that transactions balance, (2) explicit balance checks from 'balance'
  // directives balance, and (3) in the tolerance used for padding (from the
  // 'pad' directive).
  //
  // The values must be strings in the following format:
  // <currency>:<tolerance>
  // for example, 'USD:0.005'.
  //
  // By default, the tolerance allowed for currencies without an inferred value
  // is zero. As a special case, this value, that is, the fallback value used
  // for all currencies without an explicit default can be overridden using the
  // '*' currency, like this:  '*:0.5'. Used by itself, this last example sets
  // the fallback tolerance as '0.5' for all currencies.
  //
  // For detailed documentation about how tolerances are handled, see this doc:
  // http://furius.ca/beancount/doc/tolerances.
  //
  // e.g., "CHF:0.01".
  map<string, string> inferred_tolerance_default = 15;

  // A multiplier for inferred tolerance values.
  //
  // When the tolerance values aren't specified explicitly via the
  // 'inferred_tolerance_default' option, the tolerance is inferred from the
  // numbers in the input file. For example, if a transaction has posting with
  // a value like '32.424 CAD', the tolerance for CAD will be inferred to be
  // 0.001 times some multiplier. This is the muliplier value.
  //
  // We normally assume that the institution we're reproducing this posting
  // from applies rounding, and so the default value for the multiplier is
  // 0.5, that is, half of the smallest digit encountered.
  //
  // You can customize this multiplier by changing this option, typically
  // expanding it to account for amounts slightly beyond the usual tolerance,
  // for example, if you deal with institutions with bad of unexpected rounding
  // behaviour.
  //
  // For detailed documentation about how tolerances are handled, see this doc:
  // http://furius.ca/beancount/doc/tolerances
  //
  // e.g., "0.5"
  optional string inferred_tolerance_multiplier = 16;

  // Enable a feature that expands the maximum tolerance inferred on
  // transactions to include values on cost currencies inferred by postings
  // held at-cost or converted at price. Those postings can imply a tolerance
  // value by multiplying the smallest digit of the unit by the cost or price
  // value and taking half of that value.
  //
  // For example, if a posting has an amount of "2.345 RGAGX {45.00 USD}"
  // attached to it, it implies a tolerance of 0.001 x 45.00 * M = 0.045 USD
  // (where M is the inferred_tolerance_multiplier) and this is added to the
  // mix to enlarge the tolerance allowed for units of USD on that transaction.
  // All the normally inferred tolerances (see
  // http://furius.ca/beancount/doc/tolerances) are still taken into account.
  // Enabling this flag only makes the tolerances potentially wider.
  optional bool infer_tolerance_from_cost = 17;

  // A list of directory, relative to the CWD, which should be searched
  // recursively for document files. For the document files to be automatically
  // found they must have the following filename format: YYYY-MM-DD.(.*). e.g.,
  // "/path/to/your/documents/archive"
  repeated string documents = 18;

  // A list of currencies that we single out during reporting and create
  // dedicated columns for. This is used to indicate the main currencies that
  // you work with in real life. (Refrain from listing all the possible
  // currencies here, this is not what it is made for; just list the very
  // principal currencies you use daily only.)
  //
  // Because our system is agnostic to any unit definition that occurs in the
  // input file, we use this to display these values in table cells without
  // their associated unit strings. This allows you to import the numbers in a
  // spreadsheet (e.g, "101.00 USD" does not get parsed by a spreadsheet
  // import, but "101.00" does).
  //
  // If you need to enter a list of operating currencies, you may input this
  // option multiple times, that is, you repeat the entire directive once for
  // each desired operating currency.
  //
  // e.g., "USD".
  repeated string operating_currency = 19;

  // A boolean, true if the number formatting routines should output commas
  // as thousand separators in numbers.
  optional bool render_commas = 20;

  // A string that defines which set of plugins is to be run by the loader: if
  // the mode is "default", a preset list of plugins are automatically run
  // before any user plugin. If the mode is "raw", no preset plugins are run at
  // all, only user plugins are run (the user should explicitly load the desired
  // list of plugins by using the 'plugin' option. This is useful in case the
  // user wants full control over the ordering in which the plugins are run).
  enum ProcessingMode {
    DEFAULT = 0;
    RAW = 1;
  }
  optional ProcessingMode plugin_processing_mode = 21;

  // The booking method to apply to ambiguous reductions of inventory lots.
  // When a posting is matched against the contents of an account's inventory
  // to reduce its contents and multiple lots match, the method dictates how
  // this ambiguity is resolved. Methods include "STRICT" which raises an
  // error, "FIFO" which selects the oldest lot, and "NONE" which allows any
  // reduction to be added to the inventory despite the absence of a match
  // (resulting in mixed inventories).
  //
  // See the following documents for details:
  // http://furius.ca/beancount/doc/inventories
  // http://furius.ca/beancount/doc/proposal-booking
  //
  // e.g., STRICT
  optional Booking booking_method = 22;

  // A boolean, if true, prepend the directory name of the top-level file to
  // the PYTHONPATH.
  optional bool insert_pythonpath = 23;
}
